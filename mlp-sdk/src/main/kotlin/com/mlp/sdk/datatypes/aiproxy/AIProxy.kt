package com.mlp.sdk.datatypes.aiproxy

import com.fasterxml.jackson.annotation.JsonProperty
import com.mlp.api.datatypes.chatgpt.ChatMessage
import com.mlp.api.datatypes.chatgpt.ChatCompletionChoice

data class AiProxyRequest(
    val chat: AIProxyChatCompletionRequest? = null,
    val completion: CompletionRequest? = null,
    val edit: EditRequest? = null,
    val embedding: EmbeddingRequest? = null,
    val moderation: ModerationRequest? = null,
    val audioTranscribe: CreateTranscriptionRequest? = null,
    val audioTranslate: CreateTranslationRequest? = null,
    val image: CreateImageRequest? = null,
    val imageEdit: CreateImageEditRequest? = null,
    val imageVariation: CreateImageVariationRequest? = null
)

data class AiProxyResponse(
    val chat: AIProxyChatCompletionResult? = null,
    val completion: CompletionResult? = null,
    val edit: EditResult? = null,
    val embedding: EmbeddingResult? = null,
    val moderation: ModerationResult? = null,
    val audioTranscribe: SttResult? = null,
    val audioTranslate: SttResult? = null,
    val image: ImageResult? = null,
    val imageEdit: ImageResult? = null,
    val imageVariation: ImageResult? = null
)

data class AIProxyChatCompletionRequest(
    /**
     * ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API.
     */
    val model: String? = null,

    /**
     * A list of messages comprising the conversation so far
     */
    val messages: List<ChatMessage>,

    /**
     * What sampling temperature to use, between 0 and 2.
     * Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * We generally recommend altering this or top_p but not both.
     */
    val temperature: Double? = null,

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
     * So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     * We generally recommend altering this or temperature but not both.
     */
    @JsonProperty("top_p")
    val topP: Double? = null,

    /**
     * How many chat completion choices to generate for each input message.
     */
    val n: Int? = null,

    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Example Python code.
     */
    val stream: Boolean? = null,

    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     */
    val stop: List<String>? = null,

    /**
     * The maximum number of tokens to generate in the chat completion.
     * The total length of input tokens and generated tokens is limited by the model's context length.
     */
    @JsonProperty("max_tokens")
    val maxTokens: Int? = null,

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     */
    @JsonProperty("presence_penalty")
    val presencePenalty: Double? = null,

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     */
    @JsonProperty("frequency_penalty")
    val frequencyPenalty: Double? = null,

    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100.
     * Mathematically, the bias is added to the logits generated by the model prior to sampling.
     * The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    @JsonProperty("logit_bias")
    val logitBias: Map<String, Int>? = null,

    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more.
     */
    val user: String? = null,
)


data class AIProxyChatCompletionResult(
    /**
     * A unique identifier for the chat completion.
     */
    val id: String? = null,

    /**
     * The object type, which is always chat.completion.
     */
    val `object`: String? = null,

    /**
     * The Unix timestamp (in seconds) of when the chat completion was created.
     */
    val created: Long = 0,

    /**
     * The model used for the chat completion.
     */
    val model: String,

    /**
     * A list of chat completion choices. Can be more than one if n is greater than 1.
     */
    val choices: List<ChatCompletionChoice>,

    /**
     * Usage statistics for the completion request.
     */
    val usage: Usage? = null
)
